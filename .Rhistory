}
}
train.part=exp(y.hat[,1:train.num.start])
colnames(train.part) = as.character(us_wide_log$target_end_date[1:train.num.start])
train.part=pivot_longer(as_tibble(train.part),cols=everything(),names_to = "Date",values_to = "Inc.death") %>% mutate(.,Category="train")
pred.part=exp(t(pred.Y))
colnames(pred.part)= as.character(us_wide_log$target_end_date[(1+train.num.start): nrow(us_wide_log)])
pred.part=pivot_longer(as_tibble(pred.part),cols=everything(),names_to = "Date",values_to = "Inc.death")%>% mutate(.,Category="prediction")
all.box=bind_rows(train.part,pred.part) %>% mutate(.,Date=as.Date(Date))
pl<-ggplot(all.box,aes(x=Date,y=Inc.death)) + geom_boxplot(color=Category)
pl<-ggplot(all.box,aes(x=Date,y=Inc.death)) + geom_boxplot(aes(color=Category))
pl
pl<-ggplot(all.box,aes(x=Date,y=Inc.death,color=Category)) + geom_boxplot()
pl
pl<-ggplot(all.box,aes(x=Date,y=Inc.death)) + geom_boxplot(fill=Category)
pl<-ggplot(all.box,aes(x=Date,y=Inc.death,fill=Category)) + geom_boxplot()
pl
all.box
all.box=bind_rows(train.part,pred.part)
pl<-ggplot(all.box,aes(x=Date,y=Inc.death,fill=Category)) + geom_boxplot()
pl
pl<-ggplot(all.box,aes(x=Date,y=Inc.death,fill=Category)) + geom_boxplot()+  theme(axis.text.x = element_text( angle = 90))
pl
pl<-ggplot(all.box,aes(x=Date,y=Inc.death,fill=Category)) + geom_boxplot()+  theme(axis.text.x = element_text( angle = 90)) +geom_point(us_wide,aes(x=target_end_date,y=gt))
pl<-ggplot(all.box,aes(x=Date,y=Inc.death,fill=Category)) + geom_boxplot()+  theme(axis.text.x = element_text( angle = 90))
pl+ geom_point(us_wide,aes(x=target_end_date,y=gt))
us_wide
pl+ geom_point(us_wide,aes(x=as.character(target_end_date),y=gt))
pl<-ggplot(all.box,aes(x=Date,y=Inc.death,fill=Category)) + geom_voilin()+  theme(axis.text.x = element_text( angle = 90))
?geom_voilin
??geom_voilin
library(tidyverse)
?geom_voilin
p <- ggplot(ToothGrowth, aes(x=dose, y=len)) +
geom_violin()
p
p <- ggplot(ToothGrowth, aes(x=dose, y=len)) +
geom_violin()
p
p <- ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
geom_violin()
p
pl<-ggplot(all.box,aes(x=Date,y=Inc.death,fill=Category)) + geom_violin()+  theme(axis.text.x = element_text( angle = 90))
pl
ggsave(filename = "US_violin.pdf",plot = pl,width = 10, height = 10,dpi = 300)
pl<-ggplot(all.box,aes(x=Date,y=Inc.death,fill=Category)) + geom_violin()+  theme(axis.text.x = element_text( angle = 90)) + geom_dotplot(binaxis='y', stackdir='center', dotsize=1)
pl
pl<-ggplot(all.box,aes(x=Date,y=Inc.death,fill=Category)) + geom_violin()+  theme(axis.text.x = element_text( angle = 90)) + geom_dotplot(binaxis='y', stackdir='center', dotsize=0.001)
pl
pl<-ggplot(all.box,aes(x=Date,y=Inc.death,fill=Category)) + geom_violin()+  theme(axis.text.x = element_text( angle = 90))
mixed=cbind(,)
pl+ geom_dotplot(us_wide,aes(x=as.character(target_end_date),y=gt))
pl+points(as.character(us_wide$target_end_date),us_wide$gt)
pl+ geom_dotplot(aes(x=Date,y=Inc.death))
pl+ geom_point(aes(x=Date,y=Inc.death))
train.part=exp(y.hat[,1:train.num.start])
View(train.part)
colnames(train.part) = as.character(us_wide_log$target_end_date[1:train.num.start])
train.part=pivot_longer(as_tibble(train.part),cols=everything(),names_to = "Date",values_to = "Inc.death") %>% mutate(.,Category="train")
View(train.part)
train.part=exp(y.hat[,1:train.num.start])
train.part=exp(y.hat[,1:train.num.start])  %>%mutate(.,gt=us_wide$gt[1:train.num.start])
train.part=exp(y.hat[,1:train.num.start])
train.part$gt = us_wide$gt[1:train.num.start]
train.part=exp(y.hat[,1:train.num.start])
View(train.part)
train.part=exp(y.hat[,1:train.num.start])
colnames(train.part) = as.character(us_wide_log$target_end_date[1:train.num.start])
train.part=pivot_longer(as_tibble(train.part),cols=everything(),names_to = "Date",values_to = "Inc.death") %>% mutate(.,Category="train")
train.part$gt=us_wide$gt[1:30]
train.part$gt=rep(us_wide$gt[1:30],2000)
View(train.part)
sim.num=200 # number of random draws from predictive posterior distribution
View(pred.part)
240000/6
240000/6/2000
pred.part$gt=rep(us_wide$gt[(1+train.num.start):nrow(us_wide_log)],iter.num*sim.num)
all.box=bind_rows(train.part,pred.part) %>% mutate(.,Date=as.Date(Date))
all.box=bind_rows(train.part,pred.part)
pl<-ggplot(all.box,aes(x=Date,y=Inc.death,fill=Category)) + geom_boxplot()+  theme(axis.text.x = element_text( angle = 90))
pl<-ggplot(all.box,aes(x=Date,y=Inc.death,fill=Category)) + geom_violin()+  theme(axis.text.x = element_text( angle = 90))
pl+ geom_point(aes(x=Date,y=gt))
ggsave(filename = "US_violin.pdf",plot = pl,width = 10, height = 10,dpi = 300)
pl+ geom_point(aes(x=Date,y=gt))
ggsave(filename = "US_violin.pdf",plot = pl,width = 10, height = 10,dpi = 300)
pl<-ggplot(all.box,aes(x=Date,y=Inc.death,fill=Category)) + geom_violin()+  theme(axis.text.x = element_text( angle = 90)) + geom_point(aes(x=Date,y=gt))
ggsave(filename = "US_violin.pdf",plot = pl,width = 10, height = 10,dpi = 300)
pl+geom_line(aes(x=Date,y=gt))
pl+geom_line(aes(x=Date,y=gt,color=Category))
ggplot(all.box)+geom_line(aes(x=Date,y=gt,color=Category))
ggplot(all.box)+geom_path(aes(x=Date,y=gt,color=Category))
ggplot(us_wide)+geom_path(aes(x=target_end_date,y=gt))
ggplot(us_wide)+geom_line(aes(x=target_end_date,y=gt))
ggplot(us_wide)+geom_line(aes(x=target_end_date,y=gt,color='red'))
ggplot(all.box)+geom_path(aes(x=unique(Date),y=unique(gt),color=Category))
uniqeu(all.box$Date)
unique(all.box$Date)
unique(all.box$gt)
all.box$gt[1:36]
ggplot(all.box)+geom_path(aes(x=Date[1:36],y=(gt)[1:36],color=Category))
ggplot(all.box)+geom_path(aes(x=Date[1:36],y=gt[1:36],color=Category))
ggplot(all.box)+geom_path(aes(x=Date,y=gt,color=Category))
View(all.box)
all.b
all.box
ggplot(all.box)+geom_path(aes(x=as.numeric(Date),y=gt,color=Category))
ggplot(all.box[1:36,])+geom_path(aes(x=Date,y=gt,color=Category))
ggplot(all.box[1:36,])+geom_path(aes(x=Date,y=gt))
ggplot(all.box[1:36,])+geom_line(aes(x=Date,y=gt))
ggplot(all.box[1:36,])+geom_point(aes(x=Date,y=gt))
ggplot(all.box[1:36,])+geom_point(aes(x=Date,y=gt))+geom_line()
ggplot(all.box[1:36,])+geom_point(aes(x=Date,y=gt))+geom_line(aes(x=Date,y=gt))
T=all.box[1:36,]
T
ggplot(T)+geom_point(aes(x=Date,y=gt))+geom_line(aes(x=Date,y=gt))
ggplot(T)+geom_line(aes(x=Date,y=gt))
T
T$Date=as.numeric(T$Date)
T
T$Date=1:36
ggplot(T)+geom_point(aes(x=Date,y=gt))+geom_line(aes(x=Date,y=gt))
T$Date=as.character(T$Date)
T
ggplot(T)+geom_point(aes(x=Date,y=gt))+geom_line(aes(x=Date,y=gt))
ggplot(T)+geom_point(aes(x=Date,y=gt))+geom_line(aes(x=Date,y=gt))
ggplot(T)+geom_point(aes(x=Date,y=gt))+geom_path(aes(x=Date,y=gt))
ggplot(T)+geom_path(aes(x=Date,y=gt))
T$Date=as.numeric(T$Date)
ggplot(T)+geom_path(aes(x=Date,y=gt))
all.box$Date
train.part=exp(y.hat[,1:train.num.start])
colnames(train.part) = as.character(us_wide_log$target_end_date[1:train.num.start])
train.part=pivot_longer(as_tibble(train.part),cols=everything(),names_to = "Target.Date",values_to = "Inc.death") %>% mutate(.,Category="train")
train.part$gt=rep(us_wide$gt[1:train.num.start],iter.num)
train.part$Date=rep(c(1:train.num.start),iter.num)
pred.part=exp(t(pred.Y))
colnames(pred.part)= as.character(us_wide_log$target_end_date[(1+train.num.start): nrow(us_wide_log)])
pred.part=pivot_longer(as_tibble(pred.part),cols=everything(),names_to = "Target.Date",values_to = "Inc.death")%>% mutate(.,Category="prediction")
pred.part$gt=rep(us_wide$gt[(1+train.num.start):nrow(us_wide_log)],iter.num*sim.num)
pred.part$Date=rep(c((1+train.num.start):nrow(us_wide_log)),iter.num*sim.num)
all.box=bind_rows(train.part,pred.part)
pl<-ggplot(all.box,aes(x=Date,y=Inc.death,fill=Category)) + geom_boxplot()+  theme(axis.text.x = element_text( angle = 90)) +geom_point(aes(x=Date,y=gt))+geom_line(aes(x=Date,y=gt,color=Category))
pl
pl<-ggplot(all.box,aes(x=factor(Date),y=Inc.death,fill=Category)) + geom_boxplot()+  theme(axis.text.x = element_text( angle = 90)) + geom_point(aes(x=factor(Date),y=gt))+geom_line(aes(x=factor(Date),y=gt,color=Category))
pl
ggplot(all.box,aes(x=factor(Date),y=Inc.death,fill=Category)) + geom_boxplot()
ggplot(all.box,aes(x=factor(Date),y=Inc.death,fill=Category)) + geom_boxplot()+geom_line(aes(x=factor(Date),y=gt,color=Category))
ggplot(all.box,aes(x=factor(Date),y=Inc.death,fill=Category)) + geom_boxplot()+geom_line(aes(x=Date,y=gt,color=Category))
pl<-ggplot(all.box,aes(x=factor(Date),y=Inc.death,fill=Category)) + geom_boxplot()+  theme(axis.text.x = element_text( angle = 90)) + geom_point(aes(x=factor(Date),y=gt))+geom_line(aes(x=Date,y=gt,color=Category))
pl
unique(us_wide_log$target_end_date)
pl+ scale_x_discrete(labels=unique(us_wide_log$target_end_date))
pl+ theme(axis.text.x = element_text(unique(us_wide_log$target_end_date)))
pl++ scale_x_discrete(name ="Date", labels=unique(us_wide_log$target_end_date))
pl+ scale_x_discrete(name ="Date", labels=unique(us_wide_log$target_end_date))
pl+scale_x_discrete(name ="Date",breaks=c(1:nrow(us_wide)), labels=unique(us_wide_log$target_end_date))
#-----------------------------------------------------
train.num.start=30
pred.Y=c()
num.para=17
priors.dist=list(beta=list(mu=rep(0,num.para-1),cv=diag(10^(5),num.para-1,num.para-1)),sig=c(a0=0.0001,b0=0.0001))
for(train.num in train.num.start:nrow(us_wide_log)){
X=cbind(1,as.matrix(us_wide_log[1:train.num,-c(1,2)]))
y=as.matrix(us_wide_log[1:train.num,2])
#hyperparameters
Delta_0 = solve( priors.dist$beta$cv)
Delta_n = Delta_0 + t(X)%*%X
iDelta_n = solve(Delta_n)
mu_0 = priors.dist$beta$mu
mu_n = solve(Delta_n)%*% (Delta_0 %*% mu_0 + t(X)%*% y)
a_0=priors.dist$sig["a0"]
a_n = a_0  + nrow(us_wide_log[1:train.num,]) # posterior parameter of sigma^2
b_0 = priors.dist$sig["b0"]
b_n = b_0 + 0.5* (t(y)%*%y + t(as.matrix(mu_0))%*% Delta_0 %*% as.matrix(mu_0) - t(mu_n) %*% Delta_n%*% mu_n)
# starting points
model=lm(gt~. ,data=us_wide_log[1:train.num,-1])
paras=c(model$coefficients,(var(model$residuals)/length(model$residuals))) # use MLE of unconstrained linear regression
# MCMC-Gibbs sampler
iter.num=2000
sim.num=200 # number of random draws from predictive posterior distribution
result.mat=matrix(NA,iter.num,length(paras))
y.hat=matrix(NA,iter.num,nrow(us_wide_log[1:train.num,]))
for(iter in 1:iter.num){
# draw sigma^2
result.mat[iter,length(paras)] = rinvgamma(n=1,shape = a_n, scale = b_n)
result.mat[iter,-length(paras)] = mvrnorm(n=1,mu=mu_n,Sigma = result.mat[iter,length(paras)]* iDelta_n)
temp=cbind(1,us_wide_log[,-c(1,2)])
y.hat[iter,]= X%*%result.mat[iter,-length(paras)]
}
X.new=cbind(1,us_wide_log[(1+train.num),-c(1,2)])
if(!anyNA(X.new)){
pred.mean=as.matrix(X.new)%*% t(result.mat[,-length(paras)])
temp.Y=c()
for(ii in 1:length(pred.mean)){
temp.Y=c(temp.Y, rnorm(n=sim.num,mean=pred.mean[ii],sd=sqrt(result.mat[ii,length(paras)])))
}
pred.Y= rbind(pred.Y, temp.Y) # incorporating the coef and sigma
}
}
train.part=exp(y.hat[,1:train.num.start])
colnames(train.part) = as.character(us_wide_log$target_end_date[1:train.num.start])
train.part=pivot_longer(as_tibble(train.part),cols=everything(),names_to = "Target.Date",values_to = "Inc.death") %>% mutate(.,Category="train")
train.part$gt=rep(us_wide$gt[1:train.num.start],iter.num)
train.part$Date=rep(c(1:train.num.start),iter.num)
pred.part=exp(t(pred.Y))
colnames(pred.part)= as.character(us_wide_log$target_end_date[(1+train.num.start): nrow(us_wide_log)])
pred.part=pivot_longer(as_tibble(pred.part),cols=everything(),names_to = "Target.Date",values_to = "Inc.death")%>% mutate(.,Category="prediction")
pred.part$gt=rep(us_wide$gt[(1+train.num.start):nrow(us_wide_log)],iter.num*sim.num)
pred.part$Date=rep(c((1+train.num.start):nrow(us_wide_log)),iter.num*sim.num)
all.box=bind_rows(train.part,pred.part)
pl<-ggplot(all.box,aes(x=factor(Date),y=Inc.death,fill=Category)) + geom_boxplot()+  theme(axis.text.x = element_text( angle = 90)) + geom_point(aes(x=factor(Date),y=gt))+geom_line(aes(x=Date,y=gt,color=Category)) + scale_x_discrete(name ="Date",breaks=c(1:nrow(us_wide)), labels=unique(us_wide_log$target_end_date))
ggsave(filename = "US_boxplot.pdf",plot = pl,width = 10, height = 10,dpi = 300)
pl<-ggplot(all.box,aes(x=factor(Date),y=Inc.death,fill=Category)) + geom_violin()+  theme(axis.text.x = element_text( angle = 90)) + geom_point(aes(x=factor(Date),y=gt))+geom_line(aes(x=Date,y=gt,color=Category)) + scale_x_discrete(name ="Date",breaks=c(1:nrow(us_wide)), labels=unique(us_wide_log$target_end_date))
ggsave(filename = "US_violin.pdf",plot = pl,width = 10, height = 10,dpi = 300)
pl
pl<-ggplot(all.box,aes(x=factor(Date),y=Inc.death,fill=Category)) + geom_violin()+  theme(axis.text.x = element_text( angle = 90)) + geom_point(aes(x=factor(Date),y=gt))+geom_line(aes(x=Date,y=gt,color=Category)) + scale_x_continuous(name ="Date",breaks=c(1:nrow(us_wide)), labels=unique(us_wide_log$target_end_date))
pl
pl<-ggplot(all.box,aes(x=factor(Date),y=Inc.death,fill=Category)) + geom_violin()+  theme(axis.text.x = element_text( angle = 90)) + geom_point(aes(x=factor(Date),y=gt))+geom_line(aes(x=Date,y=gt,color=Category)) + scale_x_discrete(name ="Date",breaks=c(1:nrow(us_wide))-0.5, labels=unique(us_wide_log$target_end_date))
pl
pl<-ggplot(all.box,aes(x=factor(Date),y=Inc.death,fill=Category)) + geom_violin()+  theme(axis.text.x = element_text( angle = 90)) + geom_point(aes(x=factor(Date),y=gt))+geom_line(aes(x=Date,y=gt,color=Category)) + scale_x_discrete(name ="Date",breaks=c(1:nrow(us_wide)), labels=unique(us_wide_log$target_end_date))
ggsave(filename = "US_violin.pdf",plot = pl,width = 10, height = 10,dpi = 300)
pl
?ggsave
pl<-ggplot(all.box,aes(x=factor(Date),y=Inc.death,fill=Category)) + geom_boxplot()+  theme(axis.text.x = element_text( angle = 90)) + geom_point(aes(x=factor(Date),y=gt))+geom_line(aes(x=Date,y=gt,color=Category)) + scale_x_discrete(name ="Date",breaks=c(1:nrow(us_wide)), labels=unique(us_wide_log$target_end_date))
ggsave(filename = "US_boxplot.pdf",plot = pl,width = 10, height = 10)
pl<-ggplot(all.box,aes(x=factor(Date),y=Inc.death,fill=Category)) + geom_violin()+  theme(axis.text.x = element_text( angle = 90)) + geom_point(aes(x=factor(Date),y=gt))+geom_line(aes(x=Date,y=gt,color=Category)) + scale_x_discrete(name ="Date",breaks=c(1:nrow(us_wide)), labels=unique(us_wide_log$target_end_date))
ggsave(filename = "US_violin.pdf",plot = pl,width = 10, height = 10)
pl<-ggplot(all.box,aes(x=factor(Date),y=Inc.death,fill=Category)) + geom_violin()+  theme(axis.text.x = element_text( angle = 90)) + geom_point(aes(x=factor(Date),y=gt))+geom_line(aes(x=Date,y=gt,color=Category)) + scale_x_discrete(name ="Date",breaks=c(1:nrow(us_wide)), labels=unique(us_wide_log$target_end_date))
coef.list=list()
#-----------------------------------------------------
train.num.start=30
pred.Y=c()
coef.list=list()
num.para=17
priors.dist=list(beta=list(mu=rep(0,num.para-1),cv=diag(10^(5),num.para-1,num.para-1)),sig=c(a0=0.0001,b0=0.0001))
for(train.num in train.num.start:nrow(us_wide_log)){
X=cbind(1,as.matrix(us_wide_log[1:train.num,-c(1,2)]))
y=as.matrix(us_wide_log[1:train.num,2])
#hyperparameters
Delta_0 = solve( priors.dist$beta$cv)
Delta_n = Delta_0 + t(X)%*%X
iDelta_n = solve(Delta_n)
mu_0 = priors.dist$beta$mu
mu_n = solve(Delta_n)%*% (Delta_0 %*% mu_0 + t(X)%*% y)
a_0=priors.dist$sig["a0"]
a_n = a_0  + nrow(us_wide_log[1:train.num,]) # posterior parameter of sigma^2
b_0 = priors.dist$sig["b0"]
b_n = b_0 + 0.5* (t(y)%*%y + t(as.matrix(mu_0))%*% Delta_0 %*% as.matrix(mu_0) - t(mu_n) %*% Delta_n%*% mu_n)
# starting points
model=lm(gt~. ,data=us_wide_log[1:train.num,-1])
paras=c(model$coefficients,(var(model$residuals)/length(model$residuals))) # use MLE of unconstrained linear regression
# MCMC-Gibbs sampler
iter.num=2000
sim.num=100 # number of random draws from predictive posterior distribution
result.mat=matrix(NA,iter.num,length(paras))
y.hat=matrix(NA,iter.num,nrow(us_wide_log[1:train.num,]))
for(iter in 1:iter.num){
# draw sigma^2
result.mat[iter,length(paras)] = rinvgamma(n=1,shape = a_n, scale = b_n)
result.mat[iter,-length(paras)] = mvrnorm(n=1,mu=mu_n,Sigma = result.mat[iter,length(paras)]* iDelta_n)
temp=cbind(1,us_wide_log[,-c(1,2)])
y.hat[iter,]= X%*%result.mat[iter,-length(paras)]
}
coef.list=list(coef,result.mat)
X.new=cbind(1,us_wide_log[(1+train.num),-c(1,2)])
if(!anyNA(X.new)){
pred.mean=as.matrix(X.new)%*% t(result.mat[,-length(paras)])
temp.Y=c()
for(ii in 1:length(pred.mean)){
temp.Y=c(temp.Y, rnorm(n=sim.num,mean=pred.mean[ii],sd=sqrt(result.mat[ii,length(paras)])))
}
pred.Y= rbind(pred.Y, temp.Y) # incorporating the coef and sigma
}
}
coef.list[[1]]
for(train.num in train.num.start:nrow(us_wide_log)){
X=cbind(1,as.matrix(us_wide_log[1:train.num,-c(1,2)]))
y=as.matrix(us_wide_log[1:train.num,2])
#hyperparameters
Delta_0 = solve( priors.dist$beta$cv)
Delta_n = Delta_0 + t(X)%*%X
iDelta_n = solve(Delta_n)
mu_0 = priors.dist$beta$mu
mu_n = solve(Delta_n)%*% (Delta_0 %*% mu_0 + t(X)%*% y)
a_0=priors.dist$sig["a0"]
a_n = a_0  + nrow(us_wide_log[1:train.num,]) # posterior parameter of sigma^2
b_0 = priors.dist$sig["b0"]
b_n = b_0 + 0.5* (t(y)%*%y + t(as.matrix(mu_0))%*% Delta_0 %*% as.matrix(mu_0) - t(mu_n) %*% Delta_n%*% mu_n)
# starting points
model=lm(gt~. ,data=us_wide_log[1:train.num,-1])
paras=c(model$coefficients,(var(model$residuals)/length(model$residuals))) # use MLE of unconstrained linear regression
# MCMC-Gibbs sampler
iter.num=2000
sim.num=100 # number of random draws from predictive posterior distribution
result.mat=matrix(NA,iter.num,length(paras))
y.hat=matrix(NA,iter.num,nrow(us_wide_log[1:train.num,]))
for(iter in 1:iter.num){
# draw sigma^2
result.mat[iter,length(paras)] = rinvgamma(n=1,shape = a_n, scale = b_n)
result.mat[iter,-length(paras)] = mvrnorm(n=1,mu=mu_n,Sigma = result.mat[iter,length(paras)]* iDelta_n)
temp=cbind(1,us_wide_log[,-c(1,2)])
y.hat[iter,]= X%*%result.mat[iter,-length(paras)]
}
coef.list=list(coef.list,result.mat)
X.new=cbind(1,us_wide_log[(1+train.num),-c(1,2)])
if(!anyNA(X.new)){
pred.mean=as.matrix(X.new)%*% t(result.mat[,-length(paras)])
temp.Y=c()
for(ii in 1:length(pred.mean)){
temp.Y=c(temp.Y, rnorm(n=sim.num,mean=pred.mean[ii],sd=sqrt(result.mat[ii,length(paras)])))
}
pred.Y= rbind(pred.Y, temp.Y) # incorporating the coef and sigma
}
}
coef.list=list()
for(train.num in train.num.start:nrow(us_wide_log)){
X=cbind(1,as.matrix(us_wide_log[1:train.num,-c(1,2)]))
y=as.matrix(us_wide_log[1:train.num,2])
#hyperparameters
Delta_0 = solve( priors.dist$beta$cv)
Delta_n = Delta_0 + t(X)%*%X
iDelta_n = solve(Delta_n)
mu_0 = priors.dist$beta$mu
mu_n = solve(Delta_n)%*% (Delta_0 %*% mu_0 + t(X)%*% y)
a_0=priors.dist$sig["a0"]
a_n = a_0  + nrow(us_wide_log[1:train.num,]) # posterior parameter of sigma^2
b_0 = priors.dist$sig["b0"]
b_n = b_0 + 0.5* (t(y)%*%y + t(as.matrix(mu_0))%*% Delta_0 %*% as.matrix(mu_0) - t(mu_n) %*% Delta_n%*% mu_n)
# starting points
model=lm(gt~. ,data=us_wide_log[1:train.num,-1])
paras=c(model$coefficients,(var(model$residuals)/length(model$residuals))) # use MLE of unconstrained linear regression
# MCMC-Gibbs sampler
iter.num=2000
sim.num=100 # number of random draws from predictive posterior distribution
result.mat=matrix(NA,iter.num,length(paras))
y.hat=matrix(NA,iter.num,nrow(us_wide_log[1:train.num,]))
for(iter in 1:iter.num){
# draw sigma^2
result.mat[iter,length(paras)] = rinvgamma(n=1,shape = a_n, scale = b_n)
result.mat[iter,-length(paras)] = mvrnorm(n=1,mu=mu_n,Sigma = result.mat[iter,length(paras)]* iDelta_n)
temp=cbind(1,us_wide_log[,-c(1,2)])
y.hat[iter,]= X%*%result.mat[iter,-length(paras)]
}
coef.list=list(coef.list,result.mat)
X.new=cbind(1,us_wide_log[(1+train.num),-c(1,2)])
if(!anyNA(X.new)){
pred.mean=as.matrix(X.new)%*% t(result.mat[,-length(paras)])
temp.Y=c()
for(ii in 1:length(pred.mean)){
temp.Y=c(temp.Y, rnorm(n=sim.num,mean=pred.mean[ii],sd=sqrt(result.mat[ii,length(paras)])))
}
pred.Y= rbind(pred.Y, temp.Y) # incorporating the coef and sigma
}
}
coef.list=list()
for(train.num in train.num.start:nrow(us_wide_log)){
X=cbind(1,as.matrix(us_wide_log[1:train.num,-c(1,2)]))
y=as.matrix(us_wide_log[1:train.num,2])
#hyperparameters
Delta_0 = solve( priors.dist$beta$cv)
Delta_n = Delta_0 + t(X)%*%X
iDelta_n = solve(Delta_n)
mu_0 = priors.dist$beta$mu
mu_n = solve(Delta_n)%*% (Delta_0 %*% mu_0 + t(X)%*% y)
a_0=priors.dist$sig["a0"]
a_n = a_0  + nrow(us_wide_log[1:train.num,]) # posterior parameter of sigma^2
b_0 = priors.dist$sig["b0"]
b_n = b_0 + 0.5* (t(y)%*%y + t(as.matrix(mu_0))%*% Delta_0 %*% as.matrix(mu_0) - t(mu_n) %*% Delta_n%*% mu_n)
# starting points
model=lm(gt~. ,data=us_wide_log[1:train.num,-1])
paras=c(model$coefficients,(var(model$residuals)/length(model$residuals))) # use MLE of unconstrained linear regression
# MCMC-Gibbs sampler
iter.num=2000
sim.num=100 # number of random draws from predictive posterior distribution
result.mat=matrix(NA,iter.num,length(paras))
y.hat=matrix(NA,iter.num,nrow(us_wide_log[1:train.num,]))
for(iter in 1:iter.num){
# draw sigma^2
result.mat[iter,length(paras)] = rinvgamma(n=1,shape = a_n, scale = b_n)
result.mat[iter,-length(paras)] = mvrnorm(n=1,mu=mu_n,Sigma = result.mat[iter,length(paras)]* iDelta_n)
temp=cbind(1,us_wide_log[,-c(1,2)])
y.hat[iter,]= X%*%result.mat[iter,-length(paras)]
}
coef.list[[train.num-train.num.start+1]]=result.mat
X.new=cbind(1,us_wide_log[(1+train.num),-c(1,2)])
if(!anyNA(X.new)){
pred.mean=as.matrix(X.new)%*% t(result.mat[,-length(paras)])
temp.Y=c()
for(ii in 1:length(pred.mean)){
temp.Y=c(temp.Y, rnorm(n=sim.num,mean=pred.mean[ii],sd=sqrt(result.mat[ii,length(paras)])))
}
pred.Y= rbind(pred.Y, temp.Y) # incorporating the coef and sigma
}
}
coef.list[[1]]
# results of coefficients
coef.list=coef.list[1:(length(coef.list)-1)]
temp=coef.list[[1]]
head(temp)
colnames(temp)=c("Intercept",colnames(us_wide_log)[-c(1,2)],"var")
head(temp)
pivot_longer(as_tibble(temp),cols=everything(),names_to = "Variable",values_to = "Value")
temp=pivot_longer(as_tibble(temp),cols=everything(),names_to = "Variable",values_to = "Value") %>% mutate(.,End_date=us_wide_log$target_end_date[train.num+i-1])
temp
us_wide_log$target_end_date[train.num+i-1]
us_wide_log$target_end_date[train.num.start+i-1]
us_wide_log$target_end_date
i
i=1
us_wide_log$target_end_date[train.num.start+i-1]
temp=pivot_longer(as_tibble(temp),cols=everything(),names_to = "Variable",values_to = "Value") %>% mutate(.,End_date=us_wide_log$target_end_date[train.num+i-1])
temp=coef.list[[i]]
colnames(temp)=c("Intercept",colnames(us_wide_log)[-c(1,2)],"var")
temp=pivot_longer(as_tibble(temp),cols=everything(),names_to = "Variable",values_to = "Value") %>% mutate(.,End_date=us_wide_log$target_end_date[train.num+i-1])
temp
i
temp=coef.list[[i]]
colnames(temp)=c("Intercept",colnames(us_wide_log)[-c(1,2)],"var")
temp=pivot_longer(as_tibble(temp),cols=everything(),names_to = "Variable",values_to = "Value") %>% mutate(.,End_date=us_wide_log$target_end_date[train.num.start+i-1])
temp
for (i in 1:length(coef.list)){
temp=coef.list[[i]]
colnames(temp)=c("Intercept",colnames(us_wide_log)[-c(1,2)],"var")
temp=pivot_longer(as_tibble(temp),cols=everything(),names_to = "Variable",values_to = "Value") %>% mutate(.,End_date=us_wide_log$target_end_date[train.num.start+i-1])
}
for (i in 1:length(coef.list)){
temp=coef.list[[i]]
colnames(temp)=c("Intercept",colnames(us_wide_log)[-c(1,2)],"var")
temp=pivot_longer(as_tibble(temp),cols=everything(),names_to = "Variable",values_to = "Value") %>% mutate(.,End_date=us_wide_log$target_end_date[train.num.start+i-1])
coef.list[[i]]=temp
}
?unlist
l.ex <- list(a = list(1:5, LETTERS[1:5]), b = "Z", c = NA)
l.ex
unlist(l.ex, recursive = TRUE)
unlist(coef.list,recursive = T)
unlist(coef.list,recursive = F)
coef.tibble=as.tibble()
coef.tibble=as_tibble()
for (i in 1:length(coef.list)){
coef.tibble=bind_rows(coef.tibble,coef.list[[i]])
}
204000/6
coef.tibble
pl=ggplot(coef.tibble,aes(x=Variable,y = Value)) + geom_boxplot() +facet_wrap(End_date,nrow = 2,ncol=3)
?facet_wrap
pl=ggplot(coef.tibble,aes(x=Variable,y = Value)) + geom_boxplot() +facet_wrap( facets= vars(End_date),nrow = 2,ncol=3)
pl
pl=ggplot(coef.tibble,aes(x=Variable,y = Value)) + geom_boxplot() +theme(axis.text.x = element_text( angle = 90)) +facet_wrap( facets= vars(End_date),nrow = 2,ncol=3)
pl
#-----------------------------------------------------
train.num.start=30
pred.Y=c()
coef.list=list()
num.para=17
priors.dist=list(beta=list(mu=rep(0,num.para-1),cv=diag(10^(5),num.para-1,num.para-1)),sig=c(a0=0.0001,b0=0.0001))
for(train.num in train.num.start:nrow(us_wide_log)){
X=cbind(1,as.matrix(us_wide_log[1:train.num,-c(1,2)]))
y=as.matrix(us_wide_log[1:train.num,2])
#hyperparameters
Delta_0 = solve( priors.dist$beta$cv)
Delta_n = Delta_0 + t(X)%*%X
iDelta_n = solve(Delta_n)
mu_0 = priors.dist$beta$mu
mu_n = solve(Delta_n)%*% (Delta_0 %*% mu_0 + t(X)%*% y)
a_0=priors.dist$sig["a0"]
a_n = a_0  + nrow(us_wide_log[1:train.num,]) # posterior parameter of sigma^2
b_0 = priors.dist$sig["b0"]
b_n = b_0 + 0.5* (t(y)%*%y + t(as.matrix(mu_0))%*% Delta_0 %*% as.matrix(mu_0) - t(mu_n) %*% Delta_n%*% mu_n)
# starting points
model=lm(gt~. ,data=us_wide_log[1:train.num,-1])
paras=c(model$coefficients,(var(model$residuals)/length(model$residuals))) # use MLE of unconstrained linear regression
# MCMC-Gibbs sampler
iter.num=2000
sim.num=100 # number of random draws from predictive posterior distribution
result.mat=matrix(NA,iter.num,length(paras))
y.hat=matrix(NA,iter.num,nrow(us_wide_log[1:train.num,]))
for(iter in 1:iter.num){
# draw sigma^2
result.mat[iter,length(paras)] = rinvgamma(n=1,shape = a_n, scale = b_n)
result.mat[iter,-length(paras)] = mvrnorm(n=1,mu=mu_n,Sigma = result.mat[iter,length(paras)]* iDelta_n)
temp=cbind(1,us_wide_log[,-c(1,2)])
y.hat[iter,]= X%*%result.mat[iter,-length(paras)]
}
coef.list[[train.num-train.num.start+1]]=result.mat
X.new=cbind(1,us_wide_log[(1+train.num),-c(1,2)])
if(!anyNA(X.new)){
pred.mean=as.matrix(X.new)%*% t(result.mat[,-length(paras)])
temp.Y=c()
for(ii in 1:length(pred.mean)){
temp.Y=c(temp.Y, rnorm(n=sim.num,mean=pred.mean[ii],sd=sqrt(result.mat[ii,length(paras)])))
}
pred.Y= rbind(pred.Y, temp.Y) # incorporating the coef and sigma
}
}
# results of coefficients
coef.list=coef.list[1:(length(coef.list)-1)]
for (i in 1:length(coef.list)){
temp=coef.list[[i]]
colnames(temp)=c("Intercept",colnames(us_wide_log)[-c(1,2)],"variance")
temp=pivot_longer(as_tibble(temp),cols=everything(),names_to = "Variable",values_to = "Value") %>% mutate(.,End_date=us_wide_log$target_end_date[train.num.start+i-1])
coef.list[[i]]=temp
}
coef.tibble=as_tibble()
for (i in 1:length(coef.list)){
coef.tibble=bind_rows(coef.tibble,coef.list[[i]])
}
pl=ggplot(coef.tibble,aes(x=Variable,y = Value)) + geom_boxplot() +theme(axis.text.x = element_text( angle = 90)) +facet_wrap( facets= vars(End_date),nrow = 2,ncol=3)
pl
ggsave(filename = "US_coef_boxplot.pdf",plot = pl,width = 10, height = 10)
pl=ggplot(coef.tibble,aes(x=Variable,y = Value,color=Variable)) + geom_boxplot() +theme(axis.text.x = element_text( angle = 90)) +facet_wrap( facets= vars(End_date),nrow = 2,ncol=3)
ggsave(filename = "US_coef_boxplot.pdf",plot = pl,width = 10, height = 10)
